[
  {
    "class" : "UncertaintySampling",
    "package" : "pool",
    "method" : "Uncertainty Sampling with Margin",
    "category" : "Informativeness",
    "template" : "examples/template_pool.py",
    "tags" : ["pool",  "classification", "single-annotator"],
    "title" : "Uncertainty Sampling with Margin",
    "refs" : ["settles2009active"],
    "sequence" : ["title", "text_0", "plot", "refs"],
    "text_0" : "",
    "import_misc" : "from skactiveml.pool import UncertaintySampling",
    "init_qs" : "UncertaintySampling(method='margin_sampling')",
    "query_params" : "X=X, y=y, clf=clf",
    "plot_utility_params" : "candidates=None"
  },
  {
    "class" : "UncertaintySampling",
    "package" : "pool",
    "method" : "Uncertainty Sampling with Least-Confidence",
    "category" : "Informativeness",
    "template" : "examples/template_pool.py",
    "tags" : ["pool",  "classification", "single-annotator"],
    "title" : "Uncertainty Sampling with Least-Confidence",
    "refs" : ["settles2009active"],
    "sequence" : ["title", "text_0", "plot", "refs"],
    "text_0" : "",
    "import_misc" : "from skactiveml.pool import UncertaintySampling",
    "init_qs" : "UncertaintySampling(method='least_confident')",
    "query_params" : "X=X, y=y, clf=clf"
  },
  {
    "class" : "UncertaintySampling",
    "package" : "pool",
    "method" : "Uncertainty Sampling with Entropy",
    "category" : "Informativeness",
    "template" : "examples/template_pool.py",
    "tags" : ["pool",  "classification", "single-annotator"],
    "title" : "Uncertainty Sampling with Entropy",
    "refs" : ["settles2009active"],
    "sequence" : ["title", "text_0", "plot", "refs"],
    "text_0" : "",
    "import_misc" : "from skactiveml.pool import UncertaintySampling",
    "init_qs" : "UncertaintySampling(method='entropy')",
    "query_params" : "X=X, y=y, clf=clf"
  },
  {
    "class" : "UncertaintySampling",
    "package" : "pool",
    "method" : "Expected Average Precision",
    "category" : "Informativeness",
    "template" : "examples/template_pool.py",
    "tags" : ["pool",  "classification", "single-annotator"],
    "title": "Expected Average Precision",
    "refs": [
      "wang2018uncertainty"
    ],
    "sequence": [
      "title",
      "text_0",
      "plot",
      "refs"
    ],
    "text_0": "",
    "import_misc" : "from skactiveml.pool import UncertaintySampling",
    "init_qs" : "UncertaintySampling(method='expected_average_precision')",
    "query_params" : "X=X, y=y, clf=clf",
    "plot_utility_params" : "candidates=X"
  },
  {
    "class" : "UncertaintySampling",
    "package" : "pool",
    "method" : "Density-weighted Uncertainty Sampling",
    "category" : "Hybrid",
    "template" : "examples/template_pool.py",
    "tags" : ["pool",  "classification", "single-annotator"],
    "title" : "Density-weighted Uncertainty Sampling",
    "refs" : ["tang2002active"],
    "sequence" : ["title", "text_0", "plot", "refs"],
    "text_0" : "",
    "import_clf" : "from sklearn.linear_model import LogisticRegression\nfrom sklearn.mixture import GaussianMixture\nfrom skactiveml.classifier import SklearnClassifier",
    "import_misc" : "from skactiveml.pool import UncertaintySampling",
    "init_qs" : "UncertaintySampling(method='least_confident', random_state=random_state)",
    "init_clf" : "SklearnClassifier(LogisticRegression(), classes=np.unique(y_true))",
    "preproc" : "gmm = GaussianMixture(init_params='kmeans', n_components=5)\ngmm.fit(X)\ndensity = np.exp(gmm.score_samples(X))",
    "query_params" : "X=X, y=y, clf=clf, utility_weight=density",
    "plot_utility_params" : "candidates=unlabeled_indices(y), replace_nan=None"
  },
  {
    "class" : "UncertaintySampling",
    "package" : "pool",
    "method" : "Dual Strategy for Active Learning",
    "category" : "Hybrid",
    "template" : "examples/pool/template_DUAL.py",
    "tags" : ["pool",  "classification", "single-annotator"],
    "title" : "Dual Strategy for Active Learning",
    "refs" : ["donmez2007dual"],
    "sequence" : ["title", "plot", "refs"]
  }
]
